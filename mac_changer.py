#!/usr/bin/env python3

import subprocess
import re
import argparse
import textwrap
import random


def get_random_mac():
    # Generate a random MAC address with a locally administered (02:xx:xx:xx:xx:xx) prefix.
    mac = [0x02, random.randint(0x00, 0xff), random.randint(0x00, 0xff), random.randint(0x00, 0xff),
           random.randint(0x00, 0xff), random.randint(0x00, 0xff)]
    return ":".join(["%02x" % byte for byte in mac])


# Function to parse command-line arguments and return them as an options object.
def get_arguments():
    # Create the parser object.
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description="-------------------------------------------------------------------------------------------------",
        epilog=textwrap.dedent('''\
-------------------------------------------------------------------------------------------------

e.g.:
A. Change MAC address for eth0 to a specific address: mac_changer.py -i eth0 -m 00:11:22:33:44:55
B. Change MAC address for wlan0 to a random address: mac_changer.py -i wlan0
C. Display help and usage information: mac_changer.py --help


'''))

    # Add command-line arguments for 'interface' and 'mac' entered by the user.
    parser.add_argument("-i", "--interface", dest="interface", help="Interface to change its MAC address")
    parser.add_argument("-m", "--mac", dest="mac", help="New MAC address")
    options = parser.parse_args()  # Parse the arguments and store the values in 'options'.

    # Check if the 'interface' argument is not set.
    if not options.interface:
        parser.error("[-] Please specify a interface, use --help for more info.")
    # Generate a random MAC address if not provided.
    if not options.mac:
        options.mac = get_random_mac()
    # Check if the 'mac' argument is provided and has a valid format.
    if options.mac and not re.match(r"([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}", options.mac):
        parser.error("[-] Invalid MAC address format.")
    # If interface and MAC are set.
    return options


# Function to change the MAC address of the specified interface.
def change_mac(interface, mac):
    print("[+] Changing MAC address for " + interface + " to " + mac)
    subprocess.call(["ifconfig", interface, "down"])
    subprocess.call(["ifconfig", interface, "hw", "ether", mac])
    subprocess.call(["ifconfig", interface, "up"])


# Function to get the current MAC address of the specified interface.
def get_current_mac(interface):
    # Check if MAC Address was changed and convert the output to a string.
    ifconfig_result = subprocess.check_output(["ifconfig", interface]).decode('utf-8')

    # Read the MAC address from the output using regular expressions.
    mac_address_search_result = re.search(r"\w\w:\w\w:\w\w:\w\w:\w\w:\w\w", ifconfig_result)

    if mac_address_search_result:
        return mac_address_search_result.group(0)
    else:
        print("[-] No MAC address found.")


# Parse command-line arguments and store them in the 'options' object.
options = get_arguments()  # Capture the arguments and calling the function.

# Get the current MAC address of the specified interface.
current_mac = get_current_mac(options.interface)  # Read MAC Address from the output.
print("Current MAC = " + str(current_mac))

# Change the MAC address of the specified interface using user options.
change_mac(options.interface, options.mac)

# Get the current MAC address again to check if it matches the user-requested MAC.
current_mac = get_current_mac(options.interface)
if current_mac == options.mac:
    print("[+] MAC Address is changed to " + current_mac)
else:
    print("[-] MAC Address did not change.")
