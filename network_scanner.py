#!/usr/bin/env python

import scapy.all as scapy
import argparse
import textwrap

# Function to parse command-line arguments and return them as an options object.
def get_arguments():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description="-------------------------------------------------------------------------------------------------",
        epilog=textwrap.dedent('''\
-------------------------------------------------------------------------------------------------

e.g.:
A. Perform an ARP scan on a specific IP range: network_scanner.py -t 10.10.1.1/24
    * This command will scan the IP range 10.10.1.1 to 10.10.1.254.
B. Scan a single IP address: network_scanner.py -t 10.10.1.1
C. Display help and usage information: network_scanner.py --help


'''))
    parser.add_argument("-t", "--target", dest="target", help="Target IP range.")
    options = parser.parse_args()

    if not options.target:
        parser.error("[-] Please specify a target IP, use --help for more info.")

    return options

# Function to perform ARP scan on the specified IP range and return a list of clients.
def scan(ip):
    arp_request = scapy.ARP(pdst=ip)  # Create an ARP request packet with the target IP.
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")  # Create an Ethernet frame for broadcast.
    arp_request_broadcast = broadcast / arp_request  # Combine Ethernet frame and ARP request.

    # Send the combined packet and receive responses.
    answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]

    clients_list = []
    for element in answered_list:
        client_dict = {"ip": element[1].psrc, "mac": element[1].hwsrc}
        clients_list.append(client_dict)

    return clients_list

# Function to print the results of the ARP scan.
def print_result(results_list):
    print("IP\t\t\tMAC Address\n---------------------------------------------------------------------")
    for client in results_list:
        print(client["ip"] + "\t\t" + client["mac"])
    print("---------------------------------------------------------------------")

# Parse command-line arguments and store them in the 'options' object.
options = get_arguments()

# Perform an ARP scan on the specified target IP range.
scan_result = scan(options.target)

# Print the scan results.
print_result(scan_result)
